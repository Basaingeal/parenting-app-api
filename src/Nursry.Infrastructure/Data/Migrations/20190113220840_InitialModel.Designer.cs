// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nursry.Infrastructure.Data;

namespace Nursry.Infrastructure.Data.Migrations
{
    [DbContext(typeof(NursryContext))]
    [Migration("20190113220840_InitialModel")]
    partial class InitialModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Nursry.Core.Entities.BottleContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.HasKey("Id");

                    b.ToTable("BottleContents");
                });

            modelBuilder.Entity("Nursry.Core.Entities.Child", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("FirstName");

                    b.Property<Guid?>("GenderId");

                    b.Property<string>("ImageUri");

                    b.Property<string>("LastName");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("Children");
                });

            modelBuilder.Entity("Nursry.Core.Entities.DiaperType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("DiaperTypes");
                });

            modelBuilder.Entity("Nursry.Core.Entities.FeedingType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("FeedingTypes");
                });

            modelBuilder.Entity("Nursry.Core.Entities.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Nursry.Core.Entities.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ChildId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.ToTable("Log");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Log");
                });

            modelBuilder.Entity("Nursry.Core.Entities.DiaperLog", b =>
                {
                    b.HasBaseType("Nursry.Core.Entities.Log");

                    b.Property<Guid?>("DiaperTypeId");

                    b.Property<DateTime>("TimeOfDiaperChange");

                    b.HasIndex("DiaperTypeId");

                    b.HasDiscriminator().HasValue("DiaperLog");
                });

            modelBuilder.Entity("Nursry.Core.Entities.FeedingLog", b =>
                {
                    b.HasBaseType("Nursry.Core.Entities.Log");

                    b.Property<string>("Details");

                    b.Property<DateTime>("EndTime");

                    b.Property<Guid?>("FeedingTypeId");

                    b.Property<DateTime>("StartTime");

                    b.HasIndex("FeedingTypeId");

                    b.HasDiscriminator().HasValue("FeedingLog");
                });

            modelBuilder.Entity("Nursry.Core.Entities.Child", b =>
                {
                    b.HasOne("Nursry.Core.Entities.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");
                });

            modelBuilder.Entity("Nursry.Core.Entities.Log", b =>
                {
                    b.HasOne("Nursry.Core.Entities.Child", "Child")
                        .WithMany("Logs")
                        .HasForeignKey("ChildId");
                });

            modelBuilder.Entity("Nursry.Core.Entities.DiaperLog", b =>
                {
                    b.HasOne("Nursry.Core.Entities.DiaperType", "DiaperType")
                        .WithMany()
                        .HasForeignKey("DiaperTypeId");
                });

            modelBuilder.Entity("Nursry.Core.Entities.FeedingLog", b =>
                {
                    b.HasOne("Nursry.Core.Entities.FeedingType", "FeedingType")
                        .WithMany()
                        .HasForeignKey("FeedingTypeId");
                });
#pragma warning restore 612, 618
        }
    }
}
