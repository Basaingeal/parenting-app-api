// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nursry.Infrastructure.Data;

namespace Nursry.Infrastructure.Data.Migrations
{
    [DbContext(typeof(NursryContext))]
    [Migration("20190114210323_DefaultIdValue")]
    partial class DefaultIdValue
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Nursry.Core.Entities.BottleContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("Content");

                    b.HasKey("Id");

                    b.ToTable("BottleContents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("42cc37f6-2cb0-40f2-98ae-0eb44b535097"),
                            Content = "Formula"
                        },
                        new
                        {
                            Id = new Guid("b6ec1fba-9aef-4b89-bb14-1bc420331049"),
                            Content = "Breast milk"
                        });
                });

            modelBuilder.Entity("Nursry.Core.Entities.Child", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("FirstName");

                    b.Property<Guid?>("GenderId");

                    b.Property<string>("ImageUri");

                    b.Property<string>("LastName");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("Children");
                });

            modelBuilder.Entity("Nursry.Core.Entities.DiaperType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("DiaperTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d910453e-8da5-44db-bd22-84382072357c"),
                            Title = "Pee"
                        },
                        new
                        {
                            Id = new Guid("0b771b7f-5026-4e2a-a24a-4f863bc4863c"),
                            Title = "Poo"
                        },
                        new
                        {
                            Id = new Guid("0e97466b-0d0f-46ae-a504-62d4e4c674a1"),
                            Title = "Both"
                        });
                });

            modelBuilder.Entity("Nursry.Core.Entities.FeedingType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("FeedingTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("da550542-66db-458b-9ec3-57f3a0f4f4fa"),
                            Type = "Left Breast"
                        },
                        new
                        {
                            Id = new Guid("99c30681-094a-405c-8496-8b663c10a6c2"),
                            Type = "Right Breast"
                        },
                        new
                        {
                            Id = new Guid("3fdd2c0c-7aec-4479-b09f-d3c7e9dc711c"),
                            Type = "Bottle"
                        },
                        new
                        {
                            Id = new Guid("eaa19920-dcfc-4140-b82a-8882f58da27b"),
                            Type = "Meal"
                        });
                });

            modelBuilder.Entity("Nursry.Core.Entities.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("791410f0-735d-490e-b28b-89d1a5b84607"),
                            Title = "Male"
                        },
                        new
                        {
                            Id = new Guid("75571732-3ee2-4c12-92dd-df80b5a7ed30"),
                            Title = "Female"
                        });
                });

            modelBuilder.Entity("Nursry.Core.Entities.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("ChildId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.ToTable("Log");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Log");
                });

            modelBuilder.Entity("Nursry.Core.Entities.DiaperLog", b =>
                {
                    b.HasBaseType("Nursry.Core.Entities.Log");

                    b.Property<Guid?>("DiaperTypeId");

                    b.Property<DateTime>("TimeOfDiaperChange");

                    b.HasIndex("DiaperTypeId");

                    b.HasDiscriminator().HasValue("DiaperLog");
                });

            modelBuilder.Entity("Nursry.Core.Entities.FeedingLog", b =>
                {
                    b.HasBaseType("Nursry.Core.Entities.Log");

                    b.Property<string>("Details");

                    b.Property<DateTime>("EndTime");

                    b.Property<Guid?>("FeedingTypeId");

                    b.Property<DateTime>("StartTime");

                    b.HasIndex("FeedingTypeId");

                    b.HasDiscriminator().HasValue("FeedingLog");
                });

            modelBuilder.Entity("Nursry.Core.Entities.BottleFeedingLog", b =>
                {
                    b.HasBaseType("Nursry.Core.Entities.FeedingLog");

                    b.Property<decimal>("Amount");

                    b.Property<Guid?>("ContentsId");

                    b.HasIndex("ContentsId");

                    b.HasDiscriminator().HasValue("BottleFeedingLog");
                });

            modelBuilder.Entity("Nursry.Core.Entities.Child", b =>
                {
                    b.HasOne("Nursry.Core.Entities.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");
                });

            modelBuilder.Entity("Nursry.Core.Entities.Log", b =>
                {
                    b.HasOne("Nursry.Core.Entities.Child", "Child")
                        .WithMany("Logs")
                        .HasForeignKey("ChildId");
                });

            modelBuilder.Entity("Nursry.Core.Entities.DiaperLog", b =>
                {
                    b.HasOne("Nursry.Core.Entities.DiaperType", "DiaperType")
                        .WithMany()
                        .HasForeignKey("DiaperTypeId");
                });

            modelBuilder.Entity("Nursry.Core.Entities.FeedingLog", b =>
                {
                    b.HasOne("Nursry.Core.Entities.FeedingType", "FeedingType")
                        .WithMany()
                        .HasForeignKey("FeedingTypeId");
                });

            modelBuilder.Entity("Nursry.Core.Entities.BottleFeedingLog", b =>
                {
                    b.HasOne("Nursry.Core.Entities.BottleContent", "Contents")
                        .WithMany()
                        .HasForeignKey("ContentsId");
                });
#pragma warning restore 612, 618
        }
    }
}
